#!/usr/bin/env python3

import configparser
import os
import sys
import webbrowser
import subprocess
import time as ttime

import pexpect
import requests
import urllib3
from pick import pick, Picker

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class Foreman:
    '''Creates connection to foreman'''

    foreman_url = "https://10.10.30.201/api/"
    headers = {"Content-type": "application/json"}

    def __init__(self, user, passd):
        self.user = user
        self.passd = passd

    def is_admin(self):
        """If user is admin provide list of groups to choose from."""
        try:
            data = requests.get(self.foreman_url + 'users/' + self.user,
                                auth=(self.user, self.passd),
                                headers=self.headers,
                                verify=False,
                                )
        except OSError:
            print("Get method cannot be performed, is Foreman reachable? \
            Check your connection, quitting.")
            sys.exit(1)
        except KeyboardInterrupt:
            print("Interrupted by user, quitting")
            sys.exit(2)

        try:
            result = data.json()
            if result['admin'] is not True:
                return False
        except (ValueError, KeyError):
            return False
        else:
            return True

    def get_json_from_foreman(self):
        """Talking to remote foreman machine."""
        try:
            data = requests.get(self.foreman_url + 'hosts',
                                auth=(self.user, self.passd),
                                headers=self.headers,
                                verify=False,
                                )
        except OSError:
            print("Get method cannot be performed, is Foreman reachable? \
            Check your connection, quitting.")
            sys.exit(1)
        except KeyboardInterrupt:
            print("Interrupted by user, quitting")
            sys.exit(2)

        json_data = data.json()
        try:
            error = json_data['error']
            print('\tAn error occured: ', error, '\n')
        except KeyError:
            total, body = json_data['total'], json_data['results']
        return total, body


class Menu:
    """Create a nice menu."""

    def __init__(self, devices, admin=False):
        self.count, self.devices = devices
        self.header = '''---------------------------------------------------------------------------
+++ [ SSF ] This tool lets you access a system being managed by Foreman +++
---------------------------------------------------------------------------
                   [Press "q" to quit, "j/k" or arrows to move in the menu]\n'''
        if admin:
            self.mod_header = self.header + "\n !!! ADMIN MODE detected, use group filter to narrow selection: "
            self.group  = self._choose_group()
        else:
            self.group = None

    def _choose_group(self):
        """Create menu for choosing a group."""
        groups = {group['hostgroup_name'] for group in self.devices}
        groups = list(groups)
        groups.insert(0, 'SHOW ALL DEVICES')
        selected, _ = pick(groups, self.mod_header, indicator='==>')
        if selected == 'SHOW ALL DEVICES':
            return None
        return selected

    def get_label(self, option):
        """Format text for the table."""
        ip = option.get('ip')[:14]
        name = option.get('name').replace('.bic.local', '')[:40]
        os = option.get('operatingsystem_name')[:19]
        group = option.get('hostgroup_name')[:14]
        comment = option.get('comment').replace('\n',' ').replace('\r', '')[:59]

        formatted_line = '{:<15}  {:<40}  {:<20}  {:<15}  {:<60} '.format(ip, name, os, group,
                                                                          comment)
        return formatted_line

    @property
    def title(self):
        title = '''{}\n{} devices found.. Please select WPH system you want to access:\n
    {:.<15}  {:.<40}  {:.<20}  {:.<15}  {:.<60}'''.format(self.header, self.count, 'IP', 'HOSTNAME',
                                                          'OS', 'TEAM', 'COMMENT')
        return title

    def filter_device(self):
        pass

    @staticmethod
    def _quitter(picker):
        sys.exit(0)

    def hosts_table(self):
        """Makes a table from input entries."""
        if self.group:
            self.devices = [device for device in self.devices if device['hostgroup_name'] == self.group]
        picker = Picker(self.devices, self.title, indicator='==>', options_map_func=self.get_label)
        picker.register_custom_handler(ord('q'),  Menu._quitter)
        selected, _ = picker.start()
        return selected#[0]  # returns json of foreman entry


class Actions:
    """Provides service operations."""

    varbash1 = '[ -s /etc/konicaminolta/global/wph-version ] && export hostv=$(cat /etc/konicaminolta/global/wph-version)'
    varbash2 = '[ -s /etc/konicaminolta/global/wph-model ] && export hostm=$(cat /etc/konicaminolta/global/wph-model)'
    varbash3 = 'export hostn=$(hostname | sed "s/.*ffff-/$hostm-/g")'
    varbash4 = 'export hostr=$(cat /etc/apt/sources.list.d/konicaminolta.list | grep debian | cut -d" " -f4)'
    varbash5 = '[ -z $hostv ] && export hostv=$(crudini --get /etc/konicaminolta/syseng.ini global version)'
    varbash6 = '[ -z $hostm ] && export hostm=$(crudini --get /etc/konicaminolta/syseng.ini global model)'

    wph_intro = "export PS1='[$hostv-$hostr]\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\u@$hostn:\\w\\$'"

    answ = ["password: ", "# ", "iLO-> ", "login: ", "Password: "]
    answer = ""

    def __init__(self, device):
        self.device = device

    def device_actions(self):
        title = """DEVICE:
== IP / ILO IP: {} / {}
== HOSTNAME / MODEL: {} / {} / {}
== OS NAME: {}
== OWNER / GROUP: {} / {}
== STATUS: {}
== BUILD STATUS: {}
== COMMENT: {}

Please choose an action: """.format(self.device.get('ip'),
                                    self.device.get('sp_ip'),
                                    self.device.get('name'),
                                    self.device.get('medium_name'),
                                    self.device.get('model_name'),
                                    self.device.get('operatingsystem_name'),
                                    self.device.get('owner_name'),
                                    self.device.get('hostgroup_name'),
                                    self.device.get('global_status_label'),
                                    self.device.get('build_status.label'),
                                    self.device.get('comment'))

        options = ['SSH               (establish SSH connection to a machine)',
                   'ILO CONSOLE       (establish SSH connection to a machine via ILO console)',
                   'ILO WEB           (open ILO web interface in the WEB browser)',
                   'IS_REGISTERED     (run an external command to list all environments machine got registration in)']
        _, index = pick(options, title, indicator='==>')

        return index

    def backends_check(self):
        """Run external command to go through all the backends and list where
        the machine got registration.
        """
        device_name = self.device['name'].replace('.bic.local', '')

        try:
            cmd_result = subprocess.run(['wph-backends-check', '-i', device_name],
                                        stderr=subprocess.PIPE)
        except (OSError, subprocess.CalledProcessError):
            print('Backend check command could not be executed properly. '
                         'Make sure folder containing "wph-backends-check" command is in your $PATH'
                         ' and configured properly.')
            print('More info at: https://gitlab.kmiservicehub.com/scarabs/wph-backends-query-tool')
            return False
        else:
            return True

    def connect_ssh(self):
        """connect to the host via ssh """
        term_size = os.get_terminal_size()
        child = pexpect.spawn("ssh -o StrictHostKeyChecking=no root@" + str(self.device["ip"]))
        child.expect(Actions.answ)
        child.sendline("root")
        child.expect(Actions.answ)
        child.sendline(Actions.varbash1)
        child.sendline(Actions.varbash2)
        child.sendline(Actions.varbash3)
        child.sendline(Actions.varbash4)
        child.sendline(Actions.varbash5)
        child.sendline(Actions.varbash6)
        child.sendline(Actions.wph_intro)
        child.sendline("clear")
        child.setwinsize(term_size.lines, term_size.columns)
        child.interact()

    def connect_ilo_web(self):
        """connect to WEB ILO"""
        webbrowser.open("https://{}".format(self.device["sp_ip"]), new=2, autoraise=True)

    def connect_ilo_cons(self):
        """connect to ILO console"""
        print("Connecting to ILO console")
        print("For leaving the console press ESC-( and once you're in back in HPIlo type \'exit\'")
        ttime.sleep(4)
        child = pexpect.spawn("ssh -o StrictHostKeyChecking=no Administrator@" + str(self.device["sp_ip"]))
        child.expect(Actions.answ)
        child.sendline("Administrator")
        child.expect(Actions.answ)
        child.sendline("vsp")
        child.expect(Actions.answ)
        child.sendline("root")
        child.expect(Actions.answ)
        child.sendline("root")
        child.sendline("setterm --resize")
        child.sendline("clear")
        child.interact()


def main():
    """main"""

    os.system("clear")
    # Header

    user_config = os.path.expanduser("~") + "/.foreman-api_creds"
    config = configparser.ConfigParser()
    config.read(user_config)

    try:
        user = config["credentials"]["user"]
        passd = config["credentials"]["password"]

    except KeyError:
        print(
            """
        Looks like your credentials to Foreman are not set.
        You need to specify user and password for accessing Foreman API remotely.
        In order to achieve that create a file \'.foreman-api_creds\' in your $HOME
        directory with following contents:
        ....
        [credentials]
        user = youremail@domain.com
        password = yourpasswordtoaccessforeman
        ....

        Note, only devices that are assigned to your team will be listed for you, unless
        you're Foreman admin.

        """
        )
        sys.exit(2)

    # getting data
    login = Foreman(user, passd)

    devices = login.get_json_from_foreman()
    table = Menu(devices, admin=login.is_admin())
    entry = table.hosts_table()
    actions = Actions(entry)
    action = actions.device_actions()
    if action == 0:  # SSH option
        actions.connect_ssh()

    elif action == 1:  # ILO SSH option
        actions.connect_ilo_cons()
    elif action == 2:  # ILO WEB option
        actions.connect_ilo_web()
    elif action == 3:  # backends check
        response = actions.backends_check()
        if response:
            sys.exit(0)
        else:
            sys.exit(1)
    else:
        print('Invalid action')
        sys.exit(1)



if __name__ == "__main__":
    main()
